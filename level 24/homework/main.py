# list


listn = [1, 2, 3]

# ელემენტის დამატება
listn.append(4) # [1, 2, 3, 4]

# მოიხსენიოთ სიის ელემენტები
print(listn)  # [1, 2, 3, 4]

# ელემენტის მოშორება
listn.remove(1) # [2, 3, 4]

# list-ის ზომა
print(len(listn))  # 3

# ელემენტების პოვნა
print(listn[0])  # 2


# tuple


tuple1 = (1, 2, 3)

print(tuple1)  # (1, 2, 3)

# ელემენტის პოვნა
print(tuple1[1])  # 2

# tuple-ის ზომა
print(len(tuple1))  # 3

# tuple-ის განაწილება
a, b, c = (1, 2, 3)
print(a, b, c)  # 1 2 3


# set


set1 = {1, 2, 3}

# ელემენტის დამატება
set1.add(4)

# ელემენტი წაშლა
set1.remove(2)

# set-ის დაპრინტვა
print(set1)  # {1, 3, 4}


'''List
List-ები შეიქმნა იმისთვის, რომ გამოყენებისას ჰქონდეს ელემენტების მტკიცე სიის შენახვის საშუალება, რომელიც მარტივად შეგიძლიათ შეიცვალოს. 
list-ი იდეალურია, როდესაც საჭიროა indexing-ის შენარჩუნება და ცვლილებების განხორციელება (მაგ. დამატება, წაშლა).
'''

'''Tuple
Tuple-ები შეიქმნა იმისთვის, რომ წარმოადგენდეს ელემენტების არარეგულირებად ჯგუფს, რომელიც საჭიროა ინახოს როგორც ერთიანი ერთეული.
ეს განსაკუთრებით სასარგებლოა, როდესაც საჭიროა ფუნქციების მიერ რამდენიმე მნიშვნელობის დაბრუნება ან მონაცემების ცვლილებისგან თავის არიდება.
'''

'''Set
Set-ები შეიქმნა იმისთვის, რომ უზრუნველყოფდეს უნიკალური ელემენტების შენახვის საშუალება და ადვილად ოპერირებას, მათემატიკური ოპერაციების.
set-ს ვიყენებთ როდესაც საჭიროა ელემენტების უნიკალურობა და სწრაფი წევრობის ტესტირება.
'''